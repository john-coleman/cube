require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe IPv4AddressesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # IPv4Address. As you add validations to IPv4Address, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      ipv4_address: '10.20.30.40',
      mac_address: '01:45:89:AB:CD:EF',
      ptr_record: 'a-machine-acc01.a.domain.com.'
    }
  end

  let(:invalid_attributes) do
    {
      ipv4_address: '10.256.300.200',
      mac_address: '01:GH:23:IJ:45:ZZ',
      ptr_record: 'a-machine-acc01.'
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IPv4AddressesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET index' do
    it 'assigns all ipv4_addresses as @ipv4_addresses' do
      ipv4_address = IPv4Address.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:ipv4_addresses)).to eq([ipv4_address])
    end
  end

  describe 'GET show' do
    it 'assigns the requested ipv4_address as @ipv4_address' do
      ipv4_address = IPv4Address.create! valid_attributes
      get :show, { id: ipv4_address.to_param }, valid_session
      expect(assigns(:ipv4_address)).to eq(ipv4_address)
    end
  end

  describe 'GET new' do
    it 'assigns a new ipv4_address as @ipv4_address' do
      get :new, {}, valid_session
      expect(assigns(:ipv4_address)).to be_a_new(IPv4Address)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested ipv4_address as @ipv4_address' do
      ipv4_address = IPv4Address.create! valid_attributes
      get :edit, { id: ipv4_address.to_param }, valid_session
      expect(assigns(:ipv4_address)).to eq(ipv4_address)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new IPv4Address' do
        expect do
          post :create, { ipv4_address: valid_attributes }, valid_session
        end.to change(IPv4Address, :count).by(1)
      end

      it 'assigns a newly created ipv4_address as @ipv4_address' do
        post :create, { ipv4_address: valid_attributes }, valid_session
        expect(assigns(:ipv4_address)).to be_a(IPv4Address)
        expect(assigns(:ipv4_address)).to be_persisted
      end

      it 'redirects to the created ipv4_address' do
        post :create, { ipv4_address: valid_attributes }, valid_session
        expect(response).to redirect_to(IPv4Address.last)
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved ipv4_address as @ipv4_address' do
        post :create, { ipv4_address: invalid_attributes }, valid_session
        expect(assigns(:ipv4_address)).to be_a_new(IPv4Address)
      end

      it "re-renders the 'new' template" do
        post :create, { ipv4_address: invalid_attributes }, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:new_attributes) do
        {
          ipv4_address: '10.20.30.50',
          mac_address: '01:45:89:AB:CD:F0',
          ptr_record: 'new-machine-acc01.a.domain.com.'
        }
      end

      it 'updates the requested ipv4_address' do
        ipv4_address = IPv4Address.create! valid_attributes
        put :update, { id: ipv4_address.to_param, ipv4_address: new_attributes }, valid_session
        ipv4_address.reload
        expect(ipv4_address.ipv4_address).to eq(new_attributes[:ipv4_address])
        expect(ipv4_address.mac_address).to eq(new_attributes[:mac_address])
        expect(ipv4_address.ptr_record).to eq(new_attributes[:ptr_record])
      end

      it 'assigns the requested ipv4_address as @ipv4_address' do
        ipv4_address = IPv4Address.create! valid_attributes
        put :update, { id: ipv4_address.to_param, ipv4_address: valid_attributes }, valid_session
        expect(assigns(:ipv4_address)).to eq(ipv4_address)
      end

      it 'redirects to the ipv4_address' do
        ipv4_address = IPv4Address.create! valid_attributes
        put :update, { id: ipv4_address.to_param, ipv4_address: valid_attributes }, valid_session
        expect(response).to redirect_to(ipv4_address)
      end
    end

    describe 'with invalid params' do
      it 'assigns the ipv4_address as @ipv4_address' do
        ipv4_address = IPv4Address.create! valid_attributes
        put :update, { id: ipv4_address.to_param, ipv4_address: invalid_attributes }, valid_session
        expect(assigns(:ipv4_address)).to eq(ipv4_address)
      end

      it "re-renders the 'edit' template" do
        ipv4_address = IPv4Address.create! valid_attributes
        put :update, { id: ipv4_address.to_param, ipv4_address: invalid_attributes }, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested ipv4_address' do
      ipv4_address = IPv4Address.create! valid_attributes
      expect do
        delete :destroy, { id: ipv4_address.to_param }, valid_session
      end.to change(IPv4Address, :count).by(-1)
    end

    it 'redirects to the ipv4_addresses list' do
      ipv4_address = IPv4Address.create! valid_attributes
      delete :destroy, { id: ipv4_address.to_param }, valid_session
      expect(response).to redirect_to(ipv4_addresses_url)
    end
  end
end
